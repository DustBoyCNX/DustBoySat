name: DustBoy FW

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: "release_name"
        default: "v0.0.0"
      project_id:
        description: "project_id"
        default: "DustBoySat"
      body:
        description: "body"
        default: "Release Notes"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio esptool
      # - name: Build firmware
      #   run: |
      #     platformio ci --lib="./lib/*" --project-option="lib_tdf_mode=chain+" --keep-build-dir --project-conf=./platformio.ini --build-dir="$HOME" ./dustboy_vm
      - name: Prepare artifacts
        run: |

          pio run

          find $HOME | grep .bin$

          export BOARD_ENV="esp32dev"

          echo "esptool.py --chip esp32 \
            --baud 460800 \
            --before default_reset \
            --after hard_reset \
            write_flash \
            -z \
            --flash_mode dio \
            --flash_freq 40m \
            --flash_size 4MB \
            0x1000 bootloader.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 firmware.bin" > "$HOME/flash.sh"

          ./merge.sh hello.bin

          # cp -Rv $HOME/.pio/build/$BOARD_ENV/firmware.bin "$HOME"
          # cp -Rv $HOME/.pio/build/$BOARD_ENV/partitions.bin "$HOME"
          # cp -Rv $HOME/.pio/build/$BOARD_ENV/bootloader.bin "$HOME"
          # cp -Rv $HOME/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin "$HOME"

          cp -Rv .pio/build/$BOARD_ENV/firmware.bin "$HOME"
          cp -Rv .pio/build/$BOARD_ENV/partitions.bin "$HOME"
          cp -Rv .pio/build/$BOARD_ENV/bootloader.bin "$HOME"
          cp -Rv fw/hello.bin "$HOME"

          cp -Rv $HOME/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin "$HOME"

          zip --junk-paths $HOME/my-artifact $HOME/.pio/build/$BOARD_ENV/*.bin $HOME/*.bin $HOME/*.sh
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          release_name: ${{ github.event.inputs.release_name }}-binary
          body: |
            - ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')        
        with:
          files: |
            /home/runner/my-artifact.zip
            /home/runner/fw/hello.bin
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: /home/runner/my-artifact.zip
      #     asset_name: ${{ github.event.inputs.project_id}}-${{ github.event.inputs.release_name }}.zip
      #     asset_content_type: application/zip

      # - name: Upload Release Asset
      #   id: upload-release-asset2
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: /home/runner/firmware.bin
      #     asset_name: fw.bin
      #     asset_content_type: application/octet-stream
